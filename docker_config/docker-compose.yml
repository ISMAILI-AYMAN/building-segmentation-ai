version: '3.8'

services:
  # Main API Server
  api:
    build:
      context: ..
      dockerfile: docker_config/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../trained_model_final:/app/trained_model_final:ro
      - ../data:/app/data:ro
      - ../logs:/app/logs
      - cache_volume:/app/cache
    environment:
      - MODEL_PATH=/app/trained_model_final/final_model.pth
      - HOST=0.0.0.0
      - PORT=8000
      - DEVICE=cpu
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'

  # Frontend Web Interface
  frontend:
    build:
      context: ..
      dockerfile: docker_config/Dockerfile
    ports:
      - "5000:5000"
    volumes:
      - ../logs:/app/logs
      - cache_volume:/app/cache
    environment:
      - API_URL=http://api:8000
      - HOST=0.0.0.0
      - PORT=5000
      - DEBUG=false
    command: ["python", "frontend/app.py", "--api-url", "http://api:8000", "--host", "0.0.0.0", "--port", "5000"]
    depends_on:
      api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache for Performance
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ../ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
    driver: local
  cache_volume:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
